package api

import (
	"encoding/json"
	"fmt"
	"net/http"

	"sql-optimizer/internal/analyzer"
	"sql-optimizer/internal/postgres"
)

type Handler struct {
	pgClient *postgres.Client
}

func NewHandler(pgClient *postgres.Client) *Handler {
	return &Handler{pgClient: pgClient}
}

func (h *Handler) AnalyzeQuery(w http.ResponseWriter, r *http.Request) {
	var req struct {
		Query string `json:"query"`
	}
	
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid JSON", http.StatusBadRequest)
		return
	}

	fmt.Printf("üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: %s\n", req.Query)

	// –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	planJSON, err := h.pgClient.GetExplainPlan(r.Context(), req.Query)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∞: %v\n", err)
		sendError(w, "Failed to get explain plan: "+err.Error())
		return
	}

	fmt.Printf("üìä –ü–æ–ª—É—á–µ–Ω –ø–ª–∞–Ω: %s\n", planJSON)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω
	result, err := analyzer.AnalyzePlan(planJSON)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: %v\n", err)
		sendError(w, "Failed to analyze plan: "+err.Error())
		return
	}

	fmt.Printf("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: %+v\n", result)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": true,
		"data":    result,
	})
}

func sendError(w http.ResponseWriter, message string) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusInternalServerError)
	json.NewEncoder(w).Encode(map[string]interface{}{
		"success": false,
		"error":   message,
	})
}