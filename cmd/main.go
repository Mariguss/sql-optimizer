package main

import (
	"bufio"
	"fmt"
	"log"
	"net/http"
	"os"
	"strings"

	"sql-optimizer/internal/api"
	"sql-optimizer/internal/postgres"
)

func main() {
	fmt.Println("üêò SQL Optimizer - –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ PostgreSQL")
	fmt.Println("==============================================")
	
	// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	connStr := getConnectionInfo()
	
	fmt.Println("\nüîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL...")
	fmt.Println("–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", connStr)
	
	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	pgClient, err := postgres.NewClient(connStr)
	if err != nil {
		log.Fatal("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:", err)
	}
	defer pgClient.Close()

	fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL!")

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	handler := api.NewHandler(pgClient)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	http.HandleFunc("/api/analyze", handler.AnalyzeQuery)
	
	// –ü—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä—è–º–æ –≤ –∫–æ–¥–µ
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		w.Write([]byte(`
			<!DOCTYPE html>
			<html>
			<head>
				<title>SQL Optimizer</title>
				<meta charset="UTF-8">
				<style>
					body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
					.container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
					textarea { width: 100%; height: 100px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; }
					button { padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; }
					.result { margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 5px; }
				</style>
			</head>
			<body>
				<div class="container">
					<h1>üîç SQL Optimizer</h1>
					<p>–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:</p>
					<textarea id="query" placeholder="SELECT * FROM users WHERE age > 25"></textarea>
					<br>
					<button onclick="analyze()">–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å</button>
					<div id="result" class="result">–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...</div>
				</div>
				
				<script>
					function analyze() {
						const query = document.getElementById('query').value;
						const resultDiv = document.getElementById('result');
						
						if (!query) {
							resultDiv.innerHTML = '‚ùå –í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å';
							return;
						}
						
						resultDiv.innerHTML = '‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...';
						
						fetch('/api/analyze', {
							method: 'POST',
							headers: {'Content-Type': 'application/json'},
							body: JSON.stringify({query: query})
						})
						.then(response => response.json())
						.then(data => {
							resultDiv.innerHTML = '<pre>' + JSON.stringify(data, null, 2) + '</pre>';
						})
						.catch(error => {
							resultDiv.innerHTML = '‚ùå –û—à–∏–±–∫–∞: ' + error;
						});
					}
				</script>
			</body>
			</html>
		`))
	})

	fmt.Println("üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
	fmt.Println("üìã –û—Ç–∫—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
	fmt.Println("\nüõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
	
	log.Fatal(http.ListenAndServe(":8080", nil))
}

func getConnectionInfo() string {
	reader := bufio.NewReader(os.Stdin)
	
	fmt.Println("\nüìù –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:")
	fmt.Println("   (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
	fmt.Println()

	fmt.Print("üè† –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ [localhost]: ")
	host, _ := reader.ReadString('\n')
	host = strings.TrimSpace(host)
	if host == "" { host = "localhost" }

	fmt.Print("üö™ –ü–æ—Ä—Ç [5432]: ")
	port, _ := reader.ReadString('\n')
	port = strings.TrimSpace(port)
	if port == "" { port = "5432" }

	fmt.Print("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [postgres]: ")
	user, _ := reader.ReadString('\n')
	user = strings.TrimSpace(user)
	if user == "" { user = "postgres" }

	fmt.Print("üîë –ü–∞—Ä–æ–ª—å: ")
	password, _ := reader.ReadString('\n')
	password = strings.TrimSpace(password)

	fmt.Print("üíæ –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö [postgres]: ")
	dbname, _ := reader.ReadString('\n')
	dbname = strings.TrimSpace(dbname)
	if dbname == "" { dbname = "postgres" }

	fmt.Print("üîí SSL mode [disable]: ")
	sslmode, _ := reader.ReadString('\n')
	sslmode = strings.TrimSpace(sslmode)
	if sslmode == "" { sslmode = "disable" }

	return fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=%s",
		user, password, host, port, dbname, sslmode)
}